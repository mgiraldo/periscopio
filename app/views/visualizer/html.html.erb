<% content_for :dynamic_headers do %>
<% end %>

<div id="wrapper">
	<div id="mb-map"></div>
	<div id="year"></div>
	<div id="controls">
		<a id="play-btn" href="#" class="button">LOADING...</a>
		<div id="chart-wrapper">
			<div id="chart"></div>
		</div>
	</div>
</div>
<script type="text/javascript">
{
	var actors = ["","DEL","ELN","FARC","AUC"];
	var tilejson = {
		tilejson : '1.0.0',
		scheme : 'xyz',
		tiles : ['http://a.tiles.mapbox.com/v3/mga.periscopio-base/{z}/{x}/{y}.png']
	};
	var map;
	var chart;
	var hasPlotLine = false;
	var violenceData = {};
	var dataLayers = {};
	var currentLayer;
	var url = 'http://a.tiles.mapbox.com/v3/mga.periscopio-base.jsonp';
	var playing = false;
	var intervalId;
	var years = [];
	var step = 0;
	var popup;
	function createMap () {
		wax.tilejson(url,
		    function(tilejson) {
		    	// -88.8794,-9.7740,-56.3159,17.6650
		    	var NE = new L.LatLng(17.6650,-88.8794),
				SW = new L.LatLng(-9.7740,-56.3159),
				bounds = new L.LatLngBounds(SW, NE);
		        map = new L.Map('mb-map', {minZoom: 5, maxZoom: 9, maxBounds:bounds})
		          .addLayer(new wax.leaf.connector(tilejson))
		          .setView(new L.LatLng(tilejson.center[1], tilejson.center[0]), tilejson.center[2]);
				//wax.leaf.interaction(map, tilejson); // old way
				wax.leaf.interaction()
					.map(map)
					.tilejson(tilejson)
					.on(wax.tooltip().parent(map._container).events());
				map.on('popupopen',
					function (e) {
						console.log(e.popup);
						popup = e.popup;
					}
				);
				map.on('popupclose',
					function (e) {
						popup = undefined;
					}
				);
		});
		//var layer = new wax.leaf.connector(tilejson); // Returns a new L.TileLayer object.
	}
	function plotYear(year) {
		step = years.indexOf(year);
		$("#year").html("" + year);
		if (currentLayer!=undefined) {
			map.removeLayer(currentLayer);
		}
		if (dataLayers[year]==undefined) {
			// create the dot group layer
			dataLayers[year] = new L.LayerGroup();
			var yearData = violenceData[year];
			// process each dot
			var i,l=yearData.length;
			for (i=0;i<l;++i) {
				var info = yearData[i].properties;
				var coords = yearData[i].geometry.coordinates;
				// area represents deaths
				// area = pi * (radius^2)
				var r = Math.round(Math.sqrt(info.total/Math.PI));
				var dot = new L.CircleMarker( new L.LatLng(coords[1],coords[0]), 
					{radius:r, color:'#813', fillColor:'#d60000', stroke:false, fillOpacity: 1} 
				);
				var pct1=0, pct2=0, pct3=0, pct4=0;
				pct1 = Math.round(info.total_1/info.total*1000)/10;
				pct2 = Math.round(info.total_2/info.total*1000)/10;
				pct3 = Math.round(info.total_3/info.total*1000)/10;
				pct4 = Math.round(info.total_4/info.total*1000)/10;
				var popString = "<div class=\"stats-popup\">";
				popString += "<strong>" + info.city + ", " + info.department + "</strong><br />";
				popString += "<div class=\"stats-row\"><span>" + actors[1] + "</span><p style=\"width:"+(pct1/2+1)+"%\"><span class=\"stat\">" + info.total_1 + "</span></p></div>";
				popString += "<div class=\"stats-row\"><span>" + actors[2] + "</span><p style=\"width:"+(pct2/2+1)+"%\"><span class=\"stat\">" + info.total_2 + "</span></p></div>";
				popString += "<div class=\"stats-row\"><span>" + actors[3] + "</span><p style=\"width:"+(pct3/2+1)+"%\"><span class=\"stat\">" + info.total_3 + "</span></p></div>";
				popString += "<div class=\"stats-row\"><span>" + actors[4] + "</span><p style=\"width:"+(pct4/2+1)+"%\"><span class=\"stat\">" + info.total_4 + "</span></p></div>";
				popString += "<p>TOTAL: " + info.total + "</p>";
				popString += "</div>";
				dot.bindPopup(popString);
				dataLayers[year].addLayer(dot);
			}
		}
		currentLayer = dataLayers[year];
		map.addLayer(currentLayer);
		if (popup!=undefined) {
			console.log("theres a popup");
			map.closePopup();
		}
		if (hasPlotLine) {
			chart.xAxis[0].removePlotLine('year-line');
		}
		chart.xAxis[0].addPlotLine({
			color: '#ff0000',
			width: 1,
			value: years.indexOf(year),
			id: 'year-line'
		});
		hasPlotLine = true;
	}
	function init() {
		createMap();
		$("#year-select").change(
			function () {
				plotYear($(this).val());
			}
		);
		loadData();
	}
	function loadData() {
		var dataurl = '/api.json';
		$.getJSON(dataurl, function(data) {
			//console.log(data);
			// process each dot
			var i,l=data.features.length;
			var lastYear = 0;
			var k = -1;
			violenceData = {
				xAxis: {categories: [], labels: {style:{fontSize: '9px'}}},
				yAxis: {min: 0, max: 0, endOnTick: false, gridLineWidth: 0},
				series: []
			};
			violenceData.series.push({});
			violenceData.series.push({name:actors[1],data:[]});
			violenceData.series.push({name:actors[2],data:[]});
			violenceData.series.push({name:actors[3],data:[]});
			violenceData.series.push({name:actors[4],data:[]});
			for (i=0;i<l;++i) {
				if (data.features[i].properties.year_of!=lastYear) {
					k++;
					// new year... create array
					lastYear = data.features[i].properties.year_of;
					violenceData[lastYear] = [];
					violenceData.xAxis.categories.push(lastYear);
					violenceData.series[1].data[k] = 0;
					violenceData.series[2].data[k] = 0;
					violenceData.series[3].data[k] = 0;
					violenceData.series[4].data[k] = 0;
					years.push(lastYear);
				}
				violenceData.series[1].data[k] += data.features[i].properties.total_1;
				violenceData.series[2].data[k] += data.features[i].properties.total_2;
				violenceData.series[3].data[k] += data.features[i].properties.total_3;
				violenceData.series[4].data[k] += data.features[i].properties.total_4;
				if (violenceData.yAxis.max < Math.max(violenceData.series[1].data[k],violenceData.series[2].data[k],violenceData.series[3].data[k],violenceData.series[4].data[k])) {
					violenceData.yAxis.max = 1000 + Math.max(violenceData.series[1].data[k],violenceData.series[2].data[k],violenceData.series[3].data[k],violenceData.series[4].data[k])
				}
				violenceData[lastYear].push(data.features[i]);
			}
			violenceData.series.shift();
			//console.log(violenceData);
			plotChart();
			plotYear(1988);
			enablePlay();
		});
	}
	function plotChart() {
		chart = new Highcharts.Chart(
			{
				chart: {
					renderTo: 'chart',
					type: 'line',
					backgroundColor: "#001420",
					borderColor: "#001420",
					borderRadius: 0,
					animation: false,
					marginRight: 0,
					marginBottom: 20,
					marginLeft: 0,
					events: {
						click:	function(e) {
							plotYear(1988+(Math.floor(e.xAxis[0].value)));
						}
					}
				},
				plotOptions: {
					line : {
						lineWidth: 1,
						marker: {
							enabled: false,
							states: {
								hover: {
									enabled: true,
									symbol: 'circle',
									radius: 0.5,
									lineWidth: 1
								}
							}
						},
						events: {
							click:	function(e) {
								plotYear(1988+e.point.x);
							}
						}
					}
				},
				credits: {enabled:false},
				legend: {enabled:false},
				title: {text:null},
				xAxis: violenceData.xAxis,
				yAxis: violenceData.yAxis,
				series: violenceData.series
			}
		);
	}
	function playAnimation() {
		playing = true;
		intervalId = setInterval(nextStep,300);
	}
	function stopAnimation() {
		playing = false;
		clearInterval(intervalId);
	}
	function nextStep() {
		step++;
		if (step>=years.length) {
			step=0;
		}
		plotYear(years[step]);
	}
	function enablePlay() {
		$("#play-btn").html("PLAY");
		$("#play-btn").toggle(function (){
			$(this).html("PAUSE");
			playAnimation();
		}, function(){
			$(this).html("PLAY");
			stopAnimation();
		});
	}
	init();
}
</script>